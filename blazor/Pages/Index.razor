@page "/"
@using Mastermind.Core;

<div class="container">
    <div class="row">
        <div class="col">
            <h1>
                Mastermind
            </h1>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <p>
                Guess the secret colour combination that is made up of Blue, Green, Red, Orange, Yellow and Pink.
                <br />There are 4 coloured squares in the secret and colours may appear more than once.
            </p>
            <p>
                <div class="square mr-2 black"></div>A square of your guess is in the correct place.
                <br />
                <div class="square mr-2 space"></div>A square of your guess is the right colour but in the wrong place.
            </p>
            <p class="mb-0">
                Enter a guess using the coloured buttons below.
            </p>
        </div>
    </div>

    @if (Guesses.Any())
    {
        <hr />
    }

    @if (!String.IsNullOrWhiteSpace(Error))
    {
        <div class="row">
            <div class="col-md-6 mt-2">
                <div class="error banner">@Error</div>
            </div>
        </div>
    }

    @if (SecretFound)
    {
        <div class="row">
            <div class="col-md-6 mt-2">
                <div class="success banner">
                    You found the secret!
                    <button class="btn btn-link" @onclick="Reset">
                        Play again
                    </button>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <div class="col">
            <ol class="mb-0">
            @foreach (var g in Guesses)
            {
                <li class="ml-3">
                    @foreach (var colour in g.Guess)
                    {
                        var col = colour.ToString().ToLower();
                        <div class="square mr-1 @col"></div>
                    }
                    <div class="result">
                        @for (int i = 0; i < g.WellPlaced; i++)
                        {
                            <div class="square mr-1 black"></div>
                        }
                        @for (int i = 0; i < g.Misplaced; i++)
                        {
                            <div class="square mr-1 space"></div>
                        }
                        &nbsp;
                    </div>
                </li>
            }
            </ol>
        </div>
    </div>

    <hr />

    <div class="row">
        <div class="col">
            <p>
                Guess:
                @foreach (var colour in GuessInput)
                {
                    var col = MapToColour(colour.ToString()).ToString().ToLower();
                    <div class="square mr-1 @col"></div>
                }
                @for (int i = GuessInput.Length; i < 4; i++)
                {
                    <div class="square mr-1 space"></div>
                }
            </p>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <div>
                @foreach(Colours colour in Enum.GetValues(typeof(Colours)))
                {
                    var col = colour.ToString().ToLower();
                    <div class="square-lg mr-2 mb-2 @col" @onclick="@(e => AddToGuess(col))">
                        @col.ToUpper()[0]
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="row actions mt-2">
        <div class="col">
            <button class="btn btn-secondary mr-2 mb-2" @onclick="Backspace">Delete</button>
            <button class="btn btn-primary mb-2" @onclick="SubmitGuess" disabled="@(SecretFound || GuessInput.Length != 4)">Submit</button>
        </div>
    </div>

</div>

<br />
<br />
<br />

@code {
    private List<Colours> secret = Mastermind.Core.App.GenerateSecret();
    public string Result { get; set; } = string.Empty;

    public string GuessInput { get; set; } = string.Empty;
    public string Error { get; set; } = string.Empty;
    public bool SecretFound { get; set; } = false;
    public List<SubmittedGuess> Guesses { get; set; } = new List<SubmittedGuess>();

    public class SubmittedGuess {
        public List<Colours> Guess { get; set; }
        public string Result { get; set; }
        public int WellPlaced { get; set; }
        public int Misplaced { get; set; }
    }

    private void AddToGuess(string colour)
    {
        GuessInput += colour.ToLower()[0];
    }

    private void Backspace()
    {
        if (GuessInput.Length > 0)
        {
            GuessInput = GuessInput.Substring(0, GuessInput.Length - 1);
        }
    }

    private void Reset()
    {
        GuessInput = "";
        Guesses.Clear();
        SecretFound = false;
        secret = Mastermind.Core.App.GenerateSecret();
    }

    private void SubmitGuess()
    {
        Error = string.Empty;

        var guess = new List<Colours>();
        var allowedInputs = new List<string> { "b", "g", "r", "o", "y", "p" };
        foreach (char c in GuessInput)
        {
            if (!allowedInputs.Contains(c.ToString().ToLower()))
            {
                Error = "Invalid input. Only the following are characters are allowed: b, g, r, o, y, p";
                return;
            }

            guess.Add(MapToColour(c.ToString()));
        }

        var result = Mastermind.Core.App.Eval(secret, guess);

        SecretFound = result.WellPlaced == 4 && result.Misplaced == 0;
        Result = result.AsString();

        Guesses.Add(new SubmittedGuess {
            Guess = guess,
            Result = Result,
            WellPlaced = result.WellPlaced,
            Misplaced = result.Misplaced
        });

        GuessInput = "";
    }

    private static Colours MapToColour(string input)
    {
        switch (input.ToLower())
        {
            case "r":
                return Colours.Red;
            case "p":
                return Colours.Pink;
            case "b":
                return Colours.Blue;
            case "g":
                return Colours.Green;
            case "o":
                return Colours.Orange;
            case "y":
                return Colours.Yellow;
            default:
                throw new Exception("Unsupported colour: " + input);
        }
    }
}

<style type="text/css">
    li {
        margin-bottom: 5px;
    }
    .banner {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        max-width: 600px;
    }
    .error {
        border: 1px solid red;
        color: red;
        background-color: #ffd6d6;
    }
    .success {
        border: 1px solid #009933;
        color: #009933;
        background-color: #CCFFCC;
    }
    .success .btn-link {
        vertical-align: baseline;
    }
    .result {
        display: inline-block;
        border-left: 1px solid #ccc;
        padding-left: 10px;
        margin-left: 10px;
    }
    .square, .square-lg {
        border-radius: 5px;
        display: inline-block;
        vertical-align: middle;
    }
    .square {
        width: 20px;
        height: 20px;
    }
    .square-lg {
        width: 40px;
        height: 40px;
        line-height: 40px;
        user-select: none;
        text-align: center;
        vertical-align: middle;
        color: white;
        cursor: pointer;
    }
    .red { background-color: #CC0000; }
    .orange { background-color: #FF6600; }
    .yellow { background-color: #FFC300; color: black; }
    .green { background-color: #009933; }
    .blue { background-color: #0066CC; }
    .pink { background-color: #CC3399; }
    .space { border: 1px solid #aaa; }
    .black { background-color: #000; }

    body {
        color: #444;
    }
    .container {
        background-color: #fff;
    }
    .actions .btn {
        width: 134px;
    }
</style>