@page "/"
@using Mastermind.Core;

<h1>Mastermind!</h1>
<br />

@if (!String.IsNullOrWhiteSpace(Error))
{
    <div class="error">@Error</div>
}

Secret: <input type="text" name="secretInput" value="@secret.Print()" />
<br /><br />
Guess: <input type="text" @bind="GuessInput" @bind:event="oninput" />
<br /><br />
Result: @Result
<br /><br />

<button class="btn btn-primary" @onclick="SubmitGuess">Submit</button>

<br /><br />

<div>
    <div class="square red"></div>
    <div class="square red"></div>
    <div class="square red"></div>
    <div class="square red"></div>
</div>

@code {
    private List<Colours> secret = Mastermind.Core.App.GenerateSecret();
    public string Result { get; set; } = string.Empty;

    public string GuessInput { get; set; } = string.Empty;
    public string Error { get; set; } = string.Empty;



    class SubmittedGuess {
        public List<Colours> Guess { get; set; }
        public string Result { get; set; }
    }

    private void SubmitGuess()
    {
        Error = string.Empty;

        var guess = new List<Colours>();
        var allowedInputs = new List<string> { "b", "g", "r", "o", "y", "p" };
        foreach (char c in GuessInput)
        {
            if (!allowedInputs.Contains(c.ToString().ToLower()))
            {
                Error = "Invalid input, only the following are characters are allowed: b, g, r, o, y, p";
                break;
            }

            guess.Add(MapToColour(c.ToString()));
        }

        Result = Mastermind.Core.App.Eval(secret, guess).AsString();
    }

    private static Colours MapToColour(string input)
    {
        switch (input.ToLower())
        {
            case "r":
                return Colours.Red;
            case "p":
                return Colours.Pink;
            case "b":
                return Colours.Blue;
            case "g":
                return Colours.Green;
            case "o":
                return Colours.Orange;
            case "y":
                return Colours.Yellow;
            default:
                throw new Exception("Unsupported colour: " + input);
        }
    }
}

<style type="text/css">
    .error {
        border: 1px solid red;
        padding: 10px;
        color: red;
        background-color: #ffd6d6;
        border-radius: 5px;
        margin-bottom: 10px;
    }
    .square {
        width: 20px;
        height: 20px;
        border-radius: 5px;
        display: inline-block;
    }
    .red { background-color: red; }
    .orange { background-color: orange; }
    .yellow { background-color: yellow; }
    .green { background-color: green; }
    .blue { background-color: blue; }
    .pink { background-color: pink; }
    .white { background-color: white; border: 1px solid #bbb; }
</style>